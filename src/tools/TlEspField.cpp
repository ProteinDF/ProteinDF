#include <vector>
#include <algorithm>
#include "TlEspField.h"
#include "DfHpq.h"
#include "Fl_Geometry.h"
#include "TlSymmetricMatrix.h"
#include "TlPosition.h"
#include "TlUtils.h"
#include "TlSerializeData.h"

#define AU_PER_ANG 1.889762

TlEspField::TlEspField(const TlSerializeData& param)
    : param_(param) {
}


TlEspField::~TlEspField()
{
}


std::vector<double> TlEspField::makeEspFld(const TlSymmetricMatrix& P,
                                           const std::vector<TlPosition>& grids)
{
    DfHpq dfHpq(&this->param_);

    const std::size_t numOfGrids = grids.size();
    std::vector<double> values(numOfGrids);

    // electron part
    const TlSymmetricMatrix& tmpP = P;
    values = dfHpq.getESP(&tmpP, grids);

    // Coulomb potential generated by nuclear
    const Fl_Geometry flGeom(this->param_["coordinates"]);
    const std::size_t numOfAtoms = flGeom.getNumOfAtoms();
    for (std::size_t atomIndex = 0; atomIndex < numOfAtoms; ++atomIndex) {
        const std::string atomSymbol = flGeom.getAtom(atomIndex);
        if (atomSymbol == "X") {
            // not calculate in case of dummy charge
            continue;
        }

        const TlPosition pos = flGeom.getCoordinate(atomIndex);
        const double charge = flGeom.getCharge(atomIndex);

#pragma omp parallel for schedule(runtime)
        for (std::size_t gridIndex = 0; gridIndex < numOfGrids; ++gridIndex) {
            const TlPosition grid = grids[gridIndex];
            const double distance = pos.distanceFrom(grid);
            const double esp = charge / distance;

#pragma omp atomic
            values[gridIndex] += esp;
        }
    }

    return values;
}

